(defvar rotate 3)
(if (can-move? :north ) (move-dir 1 :front) (null))

(if (not (blocked?)) (move 1) (null))
(turn :left)

(defvar foassdasdo 123123)

(defvar one 1)
(defun foo (c p)
(put :chips c)
(put :balloons p)
(move rotate))

(= foassdasdo 1)

(defun goend ()
(if (not (blocked?))
((move one)
(goend))
(null)))
(defun fill ()
(repeat Spaces (if (not (isZero? myChips)) (put :chips 1) (null)))
)

(defun pickAllB ()
(pick :balloons balloonsHere)
)

(defun loopTest ()
(loop (blocked?) (if (not (isZero? myChips)) (put :chips 1) (null)))
)

(defun asdasd1 ()
(loop (blocked?) (if (not (isZero? myChips)) (put :chips 1) (null)))
)

(defun asdsd112 ()
(loop (blocked?) (if (not (isZero? myChips)) (put :chips 1) (null)))
)

(defun apksdmasd3 ()
(loop (blocked?) (if (not (isZero? myChips)) (put :chips 1) (null)))
)

(defun asdaD1 ()
(loop (blocked?) (if (not (isZero? myChips)) (put :chips 1) (null)))
)

(loop (blocked?) (if (not (isZero? myChips)) (put :chips 1) (null)))

(asdaD1)

(run-dirs :left :right)